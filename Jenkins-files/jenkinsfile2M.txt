pipeline{
    agent any
    }
	  jdk ''
        nodejs ''
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        GIT_REPO_NAME = ""
        GIT_USER_NAME = ""      # change your Github Username here
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: ''
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName= \   
                    -Dsonar.projectKey= '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'   / accept for the apporaval sucessfull 
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"   # install based on code  if it 
            }
        }
        
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh "docker build -t ."
                       sh "docker tag  "
                       sh "docker push  "
                    }
                }
            }
        }
      
stage('Update Kubernetes Manifest') {
            steps {
                script {
                    // Update the image tag in Kubernetes manifest
                    sh """
                    sed -i 's#image: ${DOCKER_IMAGE}:.*#image: ${DOCKER_IMAGE}:latest#g' k8s/your-deployment.yaml
                    """
                }
            }
        }
        
        stage('Kubernetes Apply') {
            steps {
                // Apply the Kubernetes configuration
                withCredentials([file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG')]) {
                    sh 'kubectl apply -f k8s/your-deployment.yaml'
                }
            }
        }
    }












 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------	  
        stage('Checkout Code') {
            steps {
                git branch: 'main', url:                                            # we need to add kubernites manfist file is in another git repo  for securty reasons 
            }
        }
        stage('Update Deployment File') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                       NEW_IMAGE_NAME = ":latest"   #update your image here
                       sh "sed -i 's|image: .*|image: $NEW_IMAGE_NAME|' deployment.yml"
                       sh 'git add deployment.yml'                                                                    #add the new Update deployment image to git repo 
                       sh "git commit -m 'Update deployment image to $NEW_IMAGE_NAME'"
                       sh "git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main"
                    }
                }
            }
        }
    }
}
